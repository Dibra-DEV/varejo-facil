trigger:
  branches:
    include:
      - main

pool:
  name: vm-windows

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: '1. Instalar Node.js (20.x)'

  - script: |
      echo "Instalando dependências e buildando projeto..."
      npm install
      npm run build
      echo "Instalando PM2 globalmente..."
      npm install -g pm2
    displayName: '2. Build do projeto e Instalar PM2'

  # Etapa 3: Copia a pasta 'dist' (Build) para o diretório de Staging do Pipeline
  - task: CopyFiles@2
    inputs:
      # A pasta 'dist' é criada aqui
      sourceFolder: '$(System.DefaultWorkingDirectory)/dist' 
      contents: '**'
      # Move para o diretório de artefatos temporário (Staging)
      targetFolder: '$(Build.ArtifactStagingDirectory)/app-build' 
      cleanTargetFolder: true
      overwrite: true 
    displayName: '3. Preparar Build (Staging)'

  # Etapa 4: Copia os arquivos do Staging (local seguro) para a VM
  - task: CopyFiles@2
    inputs:
      # Origem: Staging Directory
      sourceFolder: '$(Build.ArtifactStagingDirectory)/app-build' 
      contents: '**'
      # Destino: Pasta de deploy na VM
      targetFolder: 'C:\deploy\varejo-facil'
      cleanTargetFolder: true
      overwrite: true 
    displayName: '4. Copiar build para VM'

  - script: |
      echo "Reiniciando app com PM2"
      
      # Tenta apagar o app anterior silenciosamente
      pm2 delete varejo-facil --silent || true 
      
      # CORREÇÃO PM2: Usa 'pm2 start' encapsulando 'pm2 serve' para evitar que o agente trave
      pm2 start "cmd /c pm2 serve C:\deploy\varejo-facil 3000 --name varejo-facil --spa" --name varejo-facil-service --interpreter none
      
      # Salva a configuração
      pm2 save --force
    displayName: '5. Rodar app com PM2 (Corrigido)'